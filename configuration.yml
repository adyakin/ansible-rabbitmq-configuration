---

- name: gather facts
  hosts: all
  tasks:

  - name: get cluster name
    command: "rabbitmqctl cluster_status --formatter json"
    changed_when: false
    register: status_cmd

  - name: set cluster name variable
    set_fact:
      cluster_name: "{{ status_cmd.stdout | from_json | json_query('cluster_name') }}"
    when: not status_cmd.failed

  - name: show cluster name
    debug:
      msg: "host = {{ ansible_inventory_hostname }}, cluster_name = {{ cluster_name }}"


# собираем новую группу хостов в которой будет по одному хосту из каждого кластера
# Это нужно для того, что бы не выполнять одни и те же операции на
# всех узлах каждого кластера, так как в некоторых случаях это приводит
# к ошибкам c повторной попыткой создать объект.
- name: prepare host group
  connection: local
  host: localhost
  become: no
  gather_facts: no

  tasks:

  # проходим по всех хостам и добавляем в новый dict {cluster_name: hostname}
  # в случае дублирования ключа значение заменяется, в результате чего получаем
  # словарь с уникальными хостами для каждого кластера
    - name: set temporary host group
      set_fact:
        tmp_hosts: "{{ tmp_hosts|default({}) | combine( {hostvars[item].cluster_name : item} ) }}"
      with_items: "{{ groups.all }}"

    - name: add hosts to group
      add_host:
        group: tmp_masters
        hostname: "{{ item.value }}"
      loop: "{{ tmp_hosts|dict2items }}"

    - name: show tmp_masters group hosts
      debug:
        msg: "host = {{ item }}"
      with_inventory_hostnames:
        - tmp_masters

# настраиваем конфигурацию юзеров/хостов/политики на каждом кластере
- name: configure clusters
  hosts: tmp_masters
  become: yes

  roles:
    - ansible-rabbitmq-configuration
